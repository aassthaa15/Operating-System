SRTF PREEMPTIVE:

#include <iostream>

using namespace std;

int main() {
    const int numProc = 5; // Number of processes
    int id[numProc] = {1, 2, 3, 4, 5};
    int arrival[numProc] = {0, 2, 4, 6, 8};
    int burst[numProc] = {3, 6, 4, 5, 2};

    int remTime[numProc], compTime[numProc], waitTime[numProc], turnTime[numProc];
    bool completed[numProc] = {false}; // Track if a process is completed

    for (int i = 0; i < numProc; i++) {
        remTime[i] = burst[i];
    }

    int currTime = 0;
    int finished = 0;
    int totalWaitTime = 0;
    int totalTurnTime = 0;

    while (finished != numProc) {
        int minRemTime = 10000; // Arbitrary large value
        int shortest = -1;

        // Find process with the smallest remaining time that has arrived
        for (int i = 0; i < numProc; i++) {
            if (arrival[i] <= currTime && !completed[i] && remTime[i] < minRemTime) {
                minRemTime = remTime[i];
                shortest = i;
            }
        }

        if (shortest == -1) {
            currTime++;
            continue;
        }

        // Process the shortest remaining time process
        remTime[shortest]--;
        currTime++;

        if (remTime[shortest] == 0) {
            completed[shortest] = true;
            finished++;
            compTime[shortest] = currTime;
            turnTime[shortest] = compTime[shortest] - arrival[shortest];
            waitTime[shortest] = turnTime[shortest] - burst[shortest];

            totalWaitTime += waitTime[shortest];
            totalTurnTime += turnTime[shortest];
        }
    }

    double avgWaitTime = totalWaitTime / static_cast<double>(numProc);
    double avgTurnTime = totalTurnTime / static_cast<double>(numProc);

    cout << "\nPID\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n";
    for (int i = 0; i < numProc; i++) {
        cout << id[i] << "\t" 
             << arrival[i] << "\t"
             << burst[i] << "\t"
             << compTime[i] << "\t\t"
             << waitTime[i] << "\t\t"
             << turnTime[i] << "\n";
    }

    cout << "\nAvg Waiting Time: " << avgWaitTime << "\n";
    cout << "Avg Turnaround Time: " << avgTurnTime << "\n";

    return 0;
}
